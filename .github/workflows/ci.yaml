on:
  pull_request:
    branches:
      - main
  workflow_call:
    inputs:
      distribute:
        type: boolean
        default: false
      no-build-sha:
        type: boolean
        default: true

env:
  CACHE_DIR: "${{ github.workspace }}/.cache"
  TASK_TEMP_DIR: "${{ github.workspace }}/.cache/task"
  DENO_DIR: "${{ github.workspace }}/.cache/deno"
  DENO_VERSION: 1.40.1

jobs:
  checks:
    name: "Coding Checks"
    runs-on: ubuntu-22.04
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Task caching
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR}}/task
          key: task-${{ runner.os }}-${{ hashFiles('src/**', 'test/**') }}
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Setup Deno caching
        uses: actions/cache@v3
        with:
          path: ${{ env.DENO_DIR }}
          key: deno-${{ runner.os }}-${{ hashFiles('deno.*', '**/deps.ts') }}
      - name: Run checks
        run: |
          task checks
  tests:
    name: "Testing"
    runs-on: ubuntu-22.04
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Task caching
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR}}/task
          key: task-${{ runner.os }}-${{ hashFiles('deno.*', 'src/**', 'test/**') }}
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Setup Deno caching
        uses: actions/cache@v3
        with:
          path: ${{ env.DENO_DIR }}
          key: deno-${{ runner.os }}-${{ hashFiles('deno.*', '**/deps.ts') }}
      - name: Run tests
        run: |
          task cover
      - name: Report coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage/lcov
  distribute:
    name: "Create distribution"
    runs-on: ubuntu-22.04
    if: ${{ inputs.distribute }}
    needs:
      - checks
      - tests
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Task caching
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR}}/task
          key: task-${{ runner.os }}-${{ hashFiles('src/**', 'test/**') }}
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Setup Deno caching
        uses: actions/cache@v3
        with:
          path: ${{ env.DENO_DIR }}
          key: deno-${{ runner.os }}-${{ hashFiles('deno.*', '**/deps.ts') }}
      - name: Determine version
        id: version
        run: |
          if [[ "${{ inputs.no-build-sha }}" == "true" ]] ; then
            suffix=""
          else
            suffix="+${{ github.sha }}"
          fi
          version="$(cat package.json | jq -r '.version')${suffix}"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
      - name: Create distribution
        run: |
          task distribute VERSION=${{ steps.version.outputs.version }}
      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path:
            target/o-p-n.deployer-*.tar.gz*      
