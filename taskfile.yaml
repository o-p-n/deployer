version: "3"

vars:
  VERSION: '{{default "latest" .VERSION}}'
  PROJECT: '{{default "o-p-n-deployer" .PROJECT}}'

tasks:
  clean.target:
    desc:
    requires:
      vars:
        - TARGET
    cmds:
      - git clean -dfx target/{{.TARGET}}
  clean.all-targets:
    - git clean -dfx target
  clean.cache:
    - git clean -dfx .cache
  clean.coverage:
    cmds:
      - git clean -dfx coverage
  
  clean:
    desc: Cleans intermediates
    deps:
      - clean.all-targets
      - clean.coverage
  clean-all:
    desc: Cleans all generated files, including local caches
    cmds:
      - git clean -dfx .

  compile.target:
    requires:
      vars:
        - PROJECT
        - TARGET
    sources:
      - "src/**"
    generates:
      - target/{{.TARGET}}/{{.PROJECT}}
    cmds:
      - task: clean.target
        vars:
          TARGET: "{{.TARGET}}"
      - mkdir -p target/{{.TARGET}}
      - |
        deno compile \
          --allow-read --allow-write \
          --allow-env --allow-run --allow-sys \
          --target {{.TARGET}} --output target/{{.TARGET}}/{{.PROJECT}} \
          ./src/main.ts

  compile.local:
    sources:
      - src/**/*.ts
    generates:
      - target/{{.PROJECT}}
    cmds:
      - mkdir -p target
      - |
        deno compile \
        --allow-read --allow-write \
        --allow-env --allow-run --allow-sys \
        --output target/{{.PROJECT}} \
        ./src/main.ts

  compile.linux-amd64:
    - task: compile.target
      vars:
        TARGET: x86_64-unknown-linux-gnu
        PROJECT: '{{.PROJECT}}'
  compile.darwin-arm64:
    - task: compile.target
      vars:
        TARGET: aarch64-apple-darwin
        PROJECT: '{{.PROJECT}}'
  compile:
    desc: Compiles all platform binaries
    deps:
      - compile.linux-amd64
      - compile.darwin-arm64
      - compile.local

  dist.target:
    requires:
      vars:
        - TARGET
    sources:
      - target/{{.TARGET}}/{{.PROJECT}}
    generates:
      - target/{{.PROJECT}}-{{.VERSION}}-{{.TARGET}}.tar.gz
      - target/{{.PROJECT}}-{{.VERSION}}-{{.TARGET}}.tar.gz.sha256
    cmds:
      - task: compile.target
        vars:
          TARGET: "{{.TARGET}}"
      - |
        tar czf target/{{.PROJECT}}-{{.VERSION}}-{{.TARGET}}.tar.gz \
          -C target/{{.TARGET}} \
          {{.PROJECT}}
      - |
        shasum -a 256 target/{{.PROJECT}}-{{.VERSION}}-{{.TARGET}}.tar.gz > \
          target/{{.PROJECT}}-{{.VERSION}}-{{.TARGET}}.tar.gz.sha256

  dist.linux-amd64:
    - task: dist.target
      vars:
        TARGET: x86_64-unknown-linux-gnu
  dist.darwin-arm64:
    - task: dist.target
      vars:
        TARGET: aarch64-apple-darwin
  distribute:
    desc: Package binaries for distribution
    deps:
      - dist.linux-amd64
      - dist.darwin-arm64

  test:
    desc: Runs tests
    sources:
      - src/**/*.ts
      - test/**/*.ts
      - deno.*
    generates:
      - coverage/*.json
    cmds:
      - task: clean.coverage
      - |
        deno test \
          --allow-read --allow-write \
          --allow-env --allow-run --allow-sys \
          --coverage 

  coverage.html:
    sources:
      - coverage/*.json
    generates:
      - coverage/html/**
    cmds:
      - deno coverage --exclude=test --html coverage
  coverage.lcov:
    sources:
      - coverage/*.json
    generates:
      - coverage/lcov
    cmds:
      - deno coverage --exclude=test --lcov --output=coverage/lcov coverage
  coverage.summary:
    cmds:
      - deno coverage --exclude=test coverage
  coverage.report:
    deps:
      - coverage.html
      - coverage.lcov
    cmds:
      - task: coverage.summary

  cover:
    desc: Runs tests and reports coverage
    cmds:
      - task: test
      - task: coverage.report

  check.lint:
    - deno lint {{default "'**/*.js' '**/*.ts'" .CLI_ARGS}}
  
  check.fmt:
    - deno fmt --check {{default "'**/*.js' '**/*.ts'" .CLI_ARGS}}

  checks:
    desc: Check coding
    deps:
      - check.lint
      - check.fmt
